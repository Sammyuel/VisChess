'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _cliEngineHeroku = require('cli-engine-heroku');

class LabsDisable extends _cliEngineHeroku.Command {

  async run() {
    const sortBy = require('lodash.sortby');

    let { body: regions } = await this.heroku.get('/regions');
    if (this.flags.private) {
      regions = regions.filter(region => region.private_capable);
    } else if (this.flags.common) {
      regions = regions.filter(region => !region.private_capable);
    }
    regions = sortBy(regions, ['private_capable', 'name']);

    if (this.flags.json) {
      this.cli.styledJSON(regions);
    } else {
      this.cli.table(regions, {
        columns: [{ key: 'name', label: 'ID', format: n => this.cli.color.green(n) }, { key: 'description', label: 'Location' }, { key: 'private_capable', label: 'Runtime', format: c => c ? 'Private Spaces' : 'Common Runtime' }]
      });
    }
  }
}
exports.default = LabsDisable;
LabsDisable.topic = 'regions';
LabsDisable.description = 'list available regions for deployment';
LabsDisable.flags = {
  json: _cliEngineHeroku.flags.boolean({ description: 'output in json format' }),
  private: _cliEngineHeroku.flags.boolean({ description: 'show regions for private spaces' }),
  common: _cliEngineHeroku.flags.boolean({ description: 'show regions for common runtime' })
};