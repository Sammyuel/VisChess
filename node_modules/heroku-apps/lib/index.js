'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.commands = exports.topics = undefined;

var _fsExtra = require('fs-extra');

var _fsExtra2 = _interopRequireDefault(_fsExtra);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _lodash = require('lodash.flatten');

var _lodash2 = _interopRequireDefault(_lodash);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const topics = exports.topics = [{ name: 'apps', description: 'manage apps' }, { name: 'auth', description: 'heroku authentication' }, { name: 'buildpacks', description: 'manage the buildpacks for an app' }, { name: 'config', description: 'manage app config vars' }, { name: 'domains', description: 'manage the domains for an app' }, { name: 'drains', description: 'list all log drains' }, { name: 'dyno', hidden: true }, { name: 'features', description: 'manage optional features' }, { name: 'keys', description: 'manage ssh keys' }, { name: 'labs', description: 'experimental features' }, { name: 'maintenance', description: 'manage maintenance mode for an app' }, { name: 'notifications', description: 'display notifications' }, { name: 'ps', description: 'manage dynos (dynos, workers)' }, { name: 'regions', description: 'list available regions' }, { name: 'releases', description: 'manage app releases' }];

function getCommands(dir) {
  function requireCommand(f) {
    // $FlowFixMe
    let c = require(f);
    return c.default ? c.default : c;
  }

  let all = _fsExtra2.default.readdirSync(dir).map(f => _path2.default.join(dir, f));
  let commands = all.filter(f => _path2.default.extname(f) === '.js' && !f.endsWith('.test.js')).map(requireCommand);
  let subs = all.filter(f => _fsExtra2.default.lstatSync(f).isDirectory()).map(getCommands);
  return (0, _lodash2.default)(commands.concat((0, _lodash2.default)(subs)));
}

const commands = exports.commands = getCommands(_path2.default.join(__dirname, 'commands'));