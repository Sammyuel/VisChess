'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.logToFile = logToFile;

var _util = require('util');

var _util2 = _interopRequireDefault(_util);

var _chalk = require('chalk');

var _chalk2 = _interopRequireDefault(_chalk);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _moment = require('moment');

var _moment2 = _interopRequireDefault(_moment);

var _fsExtra = require('fs-extra');

var _fsExtra2 = _interopRequireDefault(_fsExtra);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function logToFile(msg, logfile) {
  try {
    _fsExtra2.default.mkdirpSync(_path2.default.dirname(logfile));
    _fsExtra2.default.appendFileSync(logfile, _chalk2.default.stripColor(msg));
  } catch (err) {
    console.error(err);
  }
}

class StreamOutput {

  constructor(stream, output) {
    this.output = '';

    this.out = output;
    this.stream = stream;
  }

  write(msg, options = {}) {
    const log = options.log !== false;
    if (log) this.writeLogFile(msg, this.constructor.startOfLine);
    // conditionally show timestamp if configured to display
    if (this.constructor.startOfLine && this.displayTimestamps) msg = this.timestamp(msg);
    if (this.out.mock) this.output += msg;else this.stream.write(msg);
    this.constructor.startOfLine = msg.endsWith('\n');
  }

  timestamp(msg) {
    return `[${(0, _moment2.default)().format()}] ${msg}`;
  }

  log(data, ...args) {
    let msg = data ? _util2.default.format(data, ...args) : '';
    msg += '\n';
    this.out.action.pause(() => this.write(msg));
  }

  writeLogFile(msg, withTimestamp) {
    if (!this.logfile) return;
    msg = withTimestamp ? this.timestamp(msg) : msg;
    logToFile(msg, this.logfile);
  }

  get displayTimestamps() {
    let bin = this.out.config.bin.replace('-', '_').toUpperCase();
    let key = `${bin}_TIMESTAMPS`;
    return ['1', 'true'].includes(process.env[key]);
  }
}
exports.default = StreamOutput;
StreamOutput.startOfLine = true;