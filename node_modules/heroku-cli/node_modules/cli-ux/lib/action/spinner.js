"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const base_1 = require("./base");
const config_1 = require("../config");
const screen_1 = require("../screen");
const supportsColor = require("supports-color");
const ansiEscapes = require('ansi-escapes');
const spinners = require('./spinners');
const stripAnsi = require("strip-ansi");
const ansiStyles = require("ansi-styles");
const chalk = require("chalk");
function color(s) {
    if (!supportsColor)
        return s;
    let has256 = supportsColor.has256 || (process.env.TERM || '').indexOf('256') !== -1;
    return has256 ? '\u001b[38;5;104m' + s + ansiStyles.reset.open : chalk.magenta(s);
}
class SpinnerAction extends base_1.ActionBase {
    constructor() {
        super();
        this.frames = spinners[config_1.Config.windows ? 'line' : 'dots2'].frames;
        this.frameIndex = 0;
    }
    _start() {
        this._reset();
        if (this.spinner)
            clearInterval(this.spinner);
        this._render();
        let interval = (this.spinner = setInterval(this._render.bind(this), config_1.Config.windows ? 500 : 100, 'spinner'));
        interval.unref();
    }
    _stop() {
        clearInterval(this.spinner);
        this._render();
        delete this.output;
    }
    _pause(icon) {
        clearInterval(this.spinner);
        this._reset();
        if (icon)
            this._render(` ${icon}`);
        delete this.output;
    }
    _render(icon) {
        const task = this.task;
        if (!task)
            return;
        this._reset();
        let frame = icon === 'spinner' ? ` ${this._frame()}` : icon || '';
        let status = task.status ? ` ${task.status}` : '';
        this.output = `${task.action}...${frame}${status}\n`;
        this._write(this.output);
    }
    _reset() {
        if (!this.output)
            return;
        let lines = this._lines(this.output);
        this._write(ansiEscapes.cursorLeft + ansiEscapes.cursorUp(lines) + ansiEscapes.eraseDown);
        delete this.output;
    }
    _frame() {
        let frame = this.frames[this.frameIndex];
        this.frameIndex = ++this.frameIndex % this.frames.length;
        return color(frame);
    }
    _lines(s) {
        return stripAnsi(s)
            .split('\n')
            .map(l => Math.ceil(l.length / screen_1.default.errtermwidth))
            .reduce((c, i) => c + i, 0);
    }
    _write(s) {
        this.stderr.write(s, { log: false });
    }
}
exports.SpinnerAction = SpinnerAction;
