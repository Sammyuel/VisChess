import { StreamOutput } from './stream';
import { Prompt, IPromptOptions } from './prompt';
import { Errors, IErrorOptions } from './errors';
import { Base } from './base';
import { ActionBase } from './action/base';
import { TableOptions } from './table';
export declare class CLI extends Base {
    stdout: StreamOutput;
    stderr: StreamOutput;
    constructor();
    private _prompt;
    readonly Prompt: Prompt;
    private _errors;
    readonly Errors: Errors;
    private _action;
    readonly action: ActionBase;
    prompt(name: string, options?: IPromptOptions): Promise<any>;
    log(data?: string, ...args: any[]): void;
    warn(err: Error | string, options?: Partial<IErrorOptions>): void;
    error(err: Error | string, options?: Partial<IErrorOptions>): void;
    exit(code?: number): void;
    table(data: any[], options: Partial<TableOptions>): any;
    styledJSON(obj: any): void;
    styledHeader(header: string): void;
    styledObject(obj: any, keys: string[]): void;
    /**
     * puts in a handler for process.on('uncaughtException') and process.on('unhandledRejection')
     */
    handleUnhandleds(): void;
    /**
     * cleanup any outstanding output like actions that need to be stopped
     */
    done(): void;
}
export declare const cli: CLI;
export default cli;
