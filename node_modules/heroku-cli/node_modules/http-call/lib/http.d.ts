/// <reference types="node" />
import http = require('http');
export declare type Protocol = 'https:' | 'http:';
/**
 * @typedef {Object} HTTPRequestOptions
 * @property {Object.<string, string>} headers - request headers
 * @property {string} method - request method (GET/POST/etc)
 * @property {(string)} body - request body. Sets content-type to application/json and stringifies when object
 * @property {(boolean)} partial - do not make continuous requests while receiving a Next-Range header for GET requests
 * @property {(number)} port - port to use
 */
export declare type FullHTTPRequestOptions = http.ClientRequestArgs & {
    raw?: boolean;
    body?: any;
    partial?: boolean;
    headers: http.OutgoingHttpHeaders;
};
export declare type HTTPRequestOptions = Partial<FullHTTPRequestOptions>;
/**
 * Utility for simple HTTP calls
 * @class
 */
export declare class HTTP {
    "constructor": typeof HTTP;
    /**
     * make an http GET request
     * @param {string} url - url or path to call
     * @param {HTTPRequestOptions} options
     * @returns {Promise}
     * @example
     * ```js
     * const http = require('http-call')
     * await http.get('https://google.com')
     * ```
     */
    static get(url: string, options?: HTTPRequestOptions): Promise<HTTP>;
    /**
     * make an http POST request
     * @param {string} url - url or path to call
     * @param {HTTPRequestOptions} options
     * @returns {Promise}
     * @example
     * ```js
     * const http = require('http-call')
     * await http.post('https://google.com')
     * ```
     */
    static post(url: string, options?: HTTPRequestOptions): Promise<HTTP>;
    /**
     * make an http PUT request
     * @param {string} url - url or path to call
     * @param {HTTPRequestOptions} options
     * @returns {Promise}
     * @example
     * ```js
     * const http = require('http-call')
     * await http.put('https://google.com')
     * ```
     */
    static put(url: string, options?: HTTPRequestOptions): Promise<HTTP>;
    /**
     * make an http PATCH request
     * @param {string} url - url or path to call
     * @param {HTTPRequestOptions} options
     * @returns {Promise}
     * @example
     * ```js
     * const http = require('http-call')
     * await http.patch('https://google.com')
     * ```
     */
    static patch(url: string, options?: HTTPRequestOptions): Promise<HTTP>;
    /**
     * make an http DELETE request
     * @param {string} url - url or path to call
     * @param {HTTPRequestOptions} options
     * @returns {Promise}
     * @example
     * ```js
     * const http = require('http-call')
     * await http.delete('https://google.com')
     * ```
     */
    static delete(url: string, options?: HTTPRequestOptions): Promise<HTTP>;
    /**
     * make a streaming request
     * @param {string} url - url or path to call
     * @param {HTTPRequestOptions} options
     * @returns {Promise}
     * @example
     * ```js
     * const http = require('http-call')
     * let {response} = await http.get('https://google.com')
     * response.on('data', console.log)
     * ```
     */
    static stream(url: string, options?: HTTPRequestOptions): Promise<HTTP>;
    static request(url: string, options?: HTTPRequestOptions): Promise<HTTP>;
    static defaults(options?: HTTPRequestOptions): typeof HTTP;
    static readonly defaultOptions: HTTPRequestOptions;
    response: http.IncomingMessage;
    request: http.ClientRequest;
    body: any;
    options: FullHTTPRequestOptions;
    readonly method: string;
    readonly statusCode: number;
    readonly secure: boolean;
    url: string;
    readonly headers: http.IncomingMessage["headers"];
    readonly partial: boolean;
    constructor(url: string, options?: HTTPRequestOptions);
    _request(): Promise<void>;
    _redirectRetries: number;
    _redirect(): Promise<void>;
    _errorRetries: number;
    _maybeRetry(err: Error): Promise<void>;
    _debugRequest(): void;
    _debugResponse(): void;
    _performRequest(): Promise<http.IncomingMessage>;
    _parse(): Promise<void>;
    _parseBody(body: Object): void;
    _getNextRange(): Promise<void>;
    _redactedHeaders(headers: http.IncomingHttpHeaders | http.OutgoingHttpHeaders): http.OutgoingHttpHeaders | http.IncomingHttpHeaders;
    readonly _responseOK: boolean;
    readonly _responseRedirect: boolean;
    readonly _shouldParseResponseBody: boolean;
    _wait(ms: number): Promise<{}>;
}
export declare class HTTPError extends Error {
    statusCode: number;
    http: HTTP;
    body: any;
    __httpcall: any;
    constructor(http: HTTP);
}
